name: Deploy to AWS

on:
  push:
    branches: [ aws]

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    steps:
      # 1. Check out the code
      - uses: actions/checkout@v3

      # 2. Set up JDK 17
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: 'maven'

      - name: Build Project
        run: mvn clean install -Dmaven.test.skip=true #-DskipTests

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Log in to Amazon ECR
        id: ecr-login
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          # Outputs from the login-ecr step
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          # The tag can be any identifier, here we use the full commit SHA
          IMAGE_TAG: ${{ github.sha }}
          # The name of your ECR repository (make sure this is created in AWS)
          ECR_REPOSITORY: onlineshop
        run: |
          # Build the Docker image using the Dockerfile in the current directory (.)
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          
          # Push the newly built image to ECR
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          
          # Expose the final image URI as an Action output
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

      - name: Fill in the new image ID in the Amazon ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: springboot-app.json
          container-name: springboot-example
          image: ${{ steps.build-image.outputs.image }}

      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: springboot-example-service
          cluster: DevCluster
          wait-for-service-stability: true
